{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the PlacementPro platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "role": {
          "type": "string",
          "description": "User's role (student, mentor, admin)."
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "resumeURL": {
          "type": "string",
          "description": "URL of the user's resume.",
          "format": "uri"
        },
        "bookingIds": {
          "type": "array",
          "description": "References to Bookings. (Relationship: User 1:N Booking)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "role"
      ]
    },
    "Mentor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Mentor",
      "type": "object",
      "description": "Represents a mentor on the PlacementPro platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the mentor entity."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Mentor)"
        },
        "company": {
          "type": "string",
          "description": "Mentor's current company."
        },
        "role": {
          "type": "string",
          "description": "Mentor's current role."
        },
        "bio": {
          "type": "string",
          "description": "Mentor's biography."
        },
        "expertise": {
          "type": "array",
          "description": "Mentor's areas of expertise.",
          "items": {
            "type": "string"
          }
        },
        "availability": {
          "type": "string",
          "description": "Mentor's availability (JSON string of date and time slots)."
        },
        "pricePerSession": {
          "type": "number",
          "description": "Mentor's price per mock interview session."
        },
        "rating": {
          "type": "number",
          "description": "Mentor's average rating (1-5 stars)."
        },
        "reviewIds": {
          "type": "array",
          "description": "References to Reviews. (Relationship: Mentor 1:N Review)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "company",
        "role",
        "bio",
        "expertise",
        "availability",
        "pricePerSession",
        "rating"
      ]
    },
    "Booking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Booking",
      "type": "object",
      "description": "Represents a booking for a mock interview session.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the booking entity."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to User (Student). (Relationship: User 1:N Booking)"
        },
        "mentorId": {
          "type": "string",
          "description": "Reference to Mentor. (Relationship: Mentor 1:N Booking)"
        },
        "slot": {
          "type": "string",
          "description": "JSON string containing the start and end time of the booking."
        },
        "status": {
          "type": "string",
          "description": "Status of the booking (confirmed, completed, cancelled)."
        },
        "videoLink": {
          "type": "string",
          "description": "Link to the video meeting for the booking.",
          "format": "uri"
        },
        "paymentId": {
          "type": "string",
          "description": "Identifier for the payment associated with the booking."
        }
      },
      "required": [
        "id",
        "studentId",
        "mentorId",
        "slot",
        "status"
      ]
    },
    "Review": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Review",
      "type": "object",
      "description": "Represents a review for a mentor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the review entity."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to User (Student) who wrote the review. (Relationship: User 1:N Review)"
        },
        "mentorId": {
          "type": "string",
          "description": "Reference to Mentor being reviewed. (Relationship: Mentor 1:N Review)"
        },
        "rating": {
          "type": "number",
          "description": "Rating given by the student (1-5 stars)."
        },
        "text": {
          "type": "string",
          "description": "Text of the review."
        }
      },
      "required": [
        "id",
        "studentId",
        "mentorId",
        "rating",
        "text"
      ]
    },
    "Resource": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Resource",
      "type": "object",
      "description": "Represents a resource available in the community library.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the resource entity."
        },
        "authorId": {
          "type": "string",
          "description": "Reference to User who created the resource. (Relationship: User 1:N Resource)"
        },
        "type": {
          "type": "string",
          "description": "Type of resource (experience, question)."
        },
        "company": {
          "type": "string",
          "description": "Company related to the resource."
        },
        "role": {
          "type": "string",
          "description": "Role related to the resource."
        },
        "content": {
          "type": "string",
          "description": "Content of the resource."
        },
        "status": {
          "type": "string",
          "description": "Status of the resource (pending, approved)."
        }
      },
      "required": [
        "id",
        "authorId",
        "type",
        "company",
        "content",
        "status"
      ]
    },
    "Bootcamp": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bootcamp",
      "type": "object",
      "description": "Represents a paid bootcamp offered on the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the bootcamp entity."
        },
        "title": {
          "type": "string",
          "description": "Title of the bootcamp."
        },
        "instructor": {
          "type": "string",
          "description": "Name of the bootcamp instructor."
        },
        "description": {
          "type": "string",
          "description": "Description of the bootcamp."
        },
        "schedule": {
          "type": "string",
          "description": "JSON string representing the bootcamp schedule."
        },
        "price": {
          "type": "number",
          "description": "Price of the bootcamp."
        },
        "enrolledStudentIds": {
          "type": "array",
          "description": "References to Users (Students) enrolled in the bootcamp. (Relationship: Bootcamp 1:N User)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "instructor",
        "description",
        "schedule",
        "price"
      ]
    },
    "ResumeAnalysis": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ResumeAnalysis",
      "type": "object",
      "description": "Represents the result of an AI resume analysis.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the analysis."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who owns this analysis."
        },
        "jobDescription": {
          "type": "string",
          "description": "The job description used for the analysis."
        },
        "matchScore": {
          "type": "number",
          "description": "The percentage match score (0-100)."
        },
        "improvements": {
          "type": "string",
          "description": "AI-generated suggestions for improvement."
        },
        "analyzedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp when the analysis was performed."
        }
      },
      "required": [
        "id",
        "userId",
        "jobDescription",
        "matchScore",
        "improvements",
        "analyzedAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Includes standard user information such as email, display name, role, photoURL and resumeURL.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
       {
        "path": "/users/{userId}/resumeAnalyses/{analysisId}",
        "definition": {
          "entityName": "ResumeAnalysis",
          "schema": {
            "$ref": "#/backend/entities/ResumeAnalysis"
          },
          "description": "Stores the history of AI resume analyses for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "analysisId",
              "description": "The unique identifier of the resume analysis."
            }
          ]
        }
      },
      {
        "path": "/mentors/{mentorId}",
        "definition": {
          "entityName": "Mentor",
          "schema": {
            "$ref": "#/backend/entities/Mentor"
          },
          "description": "Stores mentor profiles. Each document contains information about a mentor, including their company, role, bio, expertise, availability, price per session, rating, and reviews.",
          "params": [
            {
              "name": "mentorId",
              "description": "The unique identifier of the mentor."
            }
          ]
        }
      },
      {
        "path": "/bookings/{bookingId}",
        "definition": {
          "entityName": "Booking",
          "schema": {
            "$ref": "#/backend/entities/Booking"
          },
          "description": "Stores booking information. Each document represents a booking for a mock interview session, including the student ID, mentor ID, slot, status, video link, and payment ID.",
          "params": [
            {
              "name": "bookingId",
              "description": "The unique identifier of the booking."
            }
          ]
        }
      },
      {
        "path": "/reviews/{reviewId}",
        "definition": {
          "entityName": "Review",
          "schema": {
            "$ref": "#/backend/entities/Review"
          },
          "description": "Stores reviews for mentors. Each document contains the student ID, mentor ID, rating, and text of the review.",
          "params": [
            {
              "name": "reviewId",
              "description": "The unique identifier of the review."
            }
          ]
        }
      },
      {
        "path": "/resources/{resourceId}",
        "definition": {
          "entityName": "Resource",
          "schema": {
            "$ref": "#/backend/entities/Resource"
          },
          "description": "Stores resources available in the community library. Includes the author ID, type, company, role, content, and status of the resource.",
          "params": [
            {
              "name": "resourceId",
              "description": "The unique identifier of the resource."
            }
          ]
        }
      },
      {
        "path": "/bootcamps/{bootcampId}",
        "definition": {
          "entityName": "Bootcamp",
          "schema": {
            "$ref": "#/backend/entities/Bootcamp"
          },
          "description": "Stores information about paid bootcamps. Includes the title, instructor, description, schedule, price, and enrolled student IDs.",
          "params": [
            {
              "name": "bootcampId",
              "description": "The unique identifier of the bootcamp."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "roles_admin",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Collection used to store admin roles, if a document exists for the user ID they are an admin. Existence over Content pattern. It holds admin user IDs.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the admin user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and easily manageable data architecture for the PlacementPro application, adhering to the principles of Authorization Independence, Clarity of Intent, DBAC (Database-Based Access Control), and QAPs (Rules are not Filters). The structure ensures that security rules are straightforward, robust, and easily debuggable.\n\n**Authorization Independence:** Denormalization is extensively used to avoid hierarchical authorization dependencies, which can complicate security rules and hinder atomic operations (transactions/batches). For instance, access control data (e.g., enrolled student IDs for bootcamps) are embedded directly within the relevant documents, eliminating the need for complex `get()` calls in security rules. The `resumeAnalyses` are stored in a subcollection under the `user` to ensure data is owned by and easily queried for a specific user.\n\n**Structural Segregation:** The design segregates data based on access needs. User-owned data is stored under `/users/{userId}`, resources requiring moderation are kept separate, and global roles are managed via dedicated collections.\n\n**Access Modeling:** User data is primarily path-based (`/users/{userId}`). Collaborative data, like bootcamps with enrolled students, uses arrays of IDs directly within the document. Global roles are managed using the existence of documents in dedicated collections (e.g., `/roles_admin/{uid}`).\n\n**QAPs (Rules are not Filters):** The structure enables secure `list` operations by ensuring that collections contain documents with homogeneous security requirements. For example, listing mentors is safe because all documents in the `/mentors/{mentorId}` collection have the same read access permissions.\n\n**Invariants:** The structure supports invariants such as ownership and data integrity. For example, the `authorId` field in the `/resources/{resourceId}` collection ensures that the creator of a resource is always explicitly known.\n\n**Data Clarity and Predictability:** The structure enforces explicit state modeling (e.g., `status` field for resources) and avoids dynamic keys. Consistent naming conventions are followed across all paths and fields."
  }
}
