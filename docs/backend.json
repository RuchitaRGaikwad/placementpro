{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the PlacementPro platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "role": {
          "type": "string",
          "description": "User's role (student, mentor, or admin)."
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile picture.",
          "format": "uri"
        },
        "resumeURL": {
          "type": "string",
          "description": "URL of the user's resume.",
          "format": "uri"
        },
        "bookingIds": {
          "type": "array",
          "description": "References to Bookings. (Relationship: User 1:N Booking)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "email",
        "displayName",
        "role"
      ]
    },
    "Mentor": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Mentor",
      "type": "object",
      "description": "Represents a mentor on the PlacementPro platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the mentor."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:1 Mentor). The user's id"
        },
        "company": {
          "type": "string",
          "description": "Mentor's current company."
        },
        "role": {
          "type": "string",
          "description": "Mentor's current role."
        },
        "bio": {
          "type": "string",
          "description": "Mentor's biography."
        },
        "expertise": {
          "type": "array",
          "description": "Mentor's areas of expertise.",
          "items": {
            "type": "string"
          }
        },
        "availability": {
          "type": "string",
          "description": "Mentor's availability (JSON string)."
        },
        "pricePerSession": {
          "type": "number",
          "description": "Price per mock interview session."
        },
        "rating": {
          "type": "number",
          "description": "Mentor's average rating (1-5)."
        },
        "reviewIds": {
          "type": "array",
          "description": "References to Reviews. (Relationship: Mentor 1:N Review)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userId",
        "company",
        "role",
        "bio",
        "expertise",
        "availability",
        "pricePerSession"
      ]
    },
    "Booking": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Booking",
      "type": "object",
      "description": "Represents a booking for a mock interview session.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the booking."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to User (Student). (Relationship: User 1:N Booking)"
        },
        "mentorId": {
          "type": "string",
          "description": "Reference to Mentor. (Relationship: Mentor 1:N Booking)"
        },
        "slot": {
          "type": "string",
          "description": "The time slot for the booking (JSON string)."
        },
        "status": {
          "type": "string",
          "description": "Booking status (confirmed, completed, cancelled)."
        },
        "videoLink": {
          "type": "string",
          "description": "Link to the video meeting.",
          "format": "uri"
        },
        "paymentId": {
          "type": "string",
          "description": "Identifier for the payment."
        }
      },
      "required": [
        "id",
        "studentId",
        "mentorId",
        "slot",
        "status"
      ]
    },
    "Review": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Review",
      "type": "object",
      "description": "Represents a review given by a student to a mentor.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the review."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to User (Student). (Relationship: User 1:N Review)"
        },
        "mentorId": {
          "type": "string",
          "description": "Reference to Mentor. (Relationship: Mentor 1:N Review)"
        },
        "rating": {
          "type": "number",
          "description": "Rating given by the student (1-5)."
        },
        "text": {
          "type": "string",
          "description": "Text of the review."
        }
      },
      "required": [
        "id",
        "studentId",
        "mentorId",
        "rating",
        "text"
      ]
    },
    "Resource": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Resource",
      "type": "object",
      "description": "Represents a resource in the community library.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the resource."
        },
        "authorId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Resource)"
        },
        "type": {
          "type": "string",
          "description": "Type of resource (experience or question)."
        },
        "company": {
          "type": "string",
          "description": "Company related to the resource."
        },
        "role": {
          "type": "string",
          "description": "Role related to the resource."
        },
        "content": {
          "type": "string",
          "description": "Content of the resource."
        },
        "status": {
          "type": "string",
          "description": "Status of the resource (pending or approved)."
        }
      },
      "required": [
        "id",
        "authorId",
        "type",
        "company",
        "role",
        "content",
        "status"
      ]
    },
    "Bootcamp": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Bootcamp",
      "type": "object",
      "description": "Represents a paid bootcamp offered on the platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the bootcamp."
        },
        "title": {
          "type": "string",
          "description": "Title of the bootcamp."
        },
        "instructor": {
          "type": "string",
          "description": "Name of the instructor."
        },
        "description": {
          "type": "string",
          "description": "Description of the bootcamp."
        },
        "schedule": {
          "type": "string",
          "description": "Schedule of the bootcamp (JSON string)."
        },
        "price": {
          "type": "number",
          "description": "Price of the bootcamp."
        },
        "enrolledStudentIds": {
          "type": "array",
          "description": "References to Users (Students). (Relationship: Bootcamp 1:N User)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "title",
        "instructor",
        "description",
        "schedule",
        "price"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/backend/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. User ID is used as the document ID. Includes denormalized 'role' field for simpler authorization rules.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/backend/mentors/{mentorId}",
        "definition": {
          "entityName": "Mentor",
          "schema": {
            "$ref": "#/backend/entities/Mentor"
          },
          "description": "Stores mentor profiles. Mentor ID is used as the document ID. The 'userId' field is used to link to the corresponding user document.",
          "params": [
            {
              "name": "mentorId",
              "description": "The unique identifier of the mentor."
            }
          ]
        }
      },
      {
        "path": "/backend/bookings/{bookingId}",
        "definition": {
          "entityName": "Booking",
          "schema": {
            "$ref": "#/backend/entities/Booking"
          },
          "description": "Stores booking information. Booking ID is used as the document ID.",
          "params": [
            {
              "name": "bookingId",
              "description": "The unique identifier of the booking."
            }
          ]
        }
      },
      {
        "path": "/backend/reviews/{reviewId}",
        "definition": {
          "entityName": "Review",
          "schema": {
            "$ref": "#/backend/entities/Review"
          },
          "description": "Stores reviews for mentors. Review ID is used as the document ID.",
          "params": [
            {
              "name": "reviewId",
              "description": "The unique identifier of the review."
            }
          ]
        }
      },
      {
        "path": "/backend/resources/{resourceId}",
        "definition": {
          "entityName": "Resource",
          "schema": {
            "$ref": "#/backend/entities/Resource"
          },
          "description": "Stores community resources. Resource ID is used as the document ID.",
          "params": [
            {
              "name": "resourceId",
              "description": "The unique identifier of the resource."
            }
          ]
        }
      },
      {
        "path": "/backend/bootcamps/{bootcampId}",
        "definition": {
          "entityName": "Bootcamp",
          "schema": {
            "$ref": "#/backend/entities/Bootcamp"
          },
          "description": "Stores information about bootcamps. Bootcamp ID is used as the document ID.",
          "params": [
            {
              "name": "bootcampId",
              "description": "The unique identifier of the bootcamp."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support PlacementPro's features while adhering to the principles of Authorization Independence, Structural Segregation, Access Modeling, and Data Clarity. User data and associated resources are organized in hierarchical paths to simplify security rules and maintain data integrity. Key denormalization strategies are applied to avoid complex `get()` calls in security rules, enhancing performance and security.\n\n**Authorization Independence:** The `members` map in collaborative documents (if any) will be denormalized to child documents to ensure that authorization checks do not require reading parent documents.\n\n**Structural Segregation:** Different data types with varying access requirements are stored in separate collections. For instance, user-specific data resides under `/users/{userId}`, while global resources are stored in `/resources`.\n\n**Access Modeling:** Path-based ownership (`/users/{userId}/...`) is used for user-owned data, simplifying ownership-based security rules. The Membership Map (`members: {uid: role}`) is used for collaborative access (if applicable).\n\n**QAPs Support:** Secure `list` operations are supported by segregating data based on access requirements (e.g., public resources vs. user-private data) and by denormalizing authorization data when necessary."
  }
}